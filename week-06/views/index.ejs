<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>

    <link type="text/css" rel="stylesheet" href="css/styles.css">
    <!-- Unicode flower as favicon. -->
    <link rel="icon" href="data:image/svg+xml, <svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22> <text y=%22.9em%22 font-size=%2290%22> ❁ </text> </svg>">

    <script src="https://unpkg.com/react@17/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script>

    <!-- Don't use this in production: -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>

<body class="index">
    <div id="wrapper">

        <section>
            <nav>
                <ul>
                    <li> <a href="/">Home</a> </li>
                    <li> <a href="/about">About</a> </li>
                </ul>
            </nav>
        </section>

        <section>
            <p>Welcome to the home page!</p>
        </section>

        <section id="display">
        </section>

        <script type="text/babel">

        const ButterfliesPreview = (props) => 
        {
            const listItems = 
            props.data.map((butterfly) =>  
                // "clickHandler" is set to "selectItem" by App. (See below.)
                <li key={butterfly._id} id={butterfly._id} onClick={props.onClick}>
                    <img src={butterfly.src} alt={butterfly.alt}/>
                    <p> {butterfly.title} </p>
                </li>
            )
            return <ul id="butterflies">{listItems}</ul>
        }

        const ButterflyDetail = (props) => {
        return (
            <div id="detail" className="hidden">
            <section>
            <img src={props.item.src || ""} alt={props.item.alt || ""}/>
            <h1> {props.item.title} </h1>
            <p> Model From: <a href={props.item.model_src || ""}> {props.item.model || ""} </a></p>
            </section>

            <section>
                <p> ꕤ </p>
            </section>

            <section>
                <form>
                    <fieldset>
                    <legend>Edit Butterfly</legend>
                        <p>Title:</p> <input type="text" name="title" value={props.item.title || ""} onChange={props.onChange}/> <br/>
                        <p>Alt:</p> <textarea name="alt" value={props.item.alt || ""} onChange={props.onChange}/> <br/>
                        <p>Image source:</p> <input type="text" name="src" value={props.item.src || ""} onChange={props.onChange}/> <br/>
                        <p>Model By:</p> <input type="text" name="model" value={props.item.model || ""} onChange={props.onChange}/>
                        <p>At:</p> <input type="text" name="model_src" value={props.item.model_src || ""} onChange={props.onChange}/>
                    </fieldset>
                </form>
                <button name="clear" id="clear" onClick={props.clearForm}>CLEAR</button>&nbsp;
                </section>
            </div>
         )
        }

        // >>>

            const App = () => {
                // Create the state variable items and the method setItems. 
                // Initialize items to the "butterflies" array.
                const [items, setItems] = React.useState(<%- butterflies %>);

                // Create the state variable currentItem and the method setCurrentItem.
                // Initialize currentItem to nothing. 
                // Updating currentItem will cause any element that relies on it to re-render.
                const [currentItem, setCurrentItem] = React.useState({});

                // When an item from ButterfliesPreview is clicked, find the butterfly object with its id
                // and set it to the current item. Then unhide the detail/form elements.
                const selectItem = (event) => {
                    const found = items.find((item) => 
                    {
                        return item._id === event.target.parentElement.id;
                    });
                    setCurrentItem(found);
                    document.getElementById("detail").classList.remove("hidden");
                    console.log(found);
                }

                // When clear button is clicked, set current item to nothing, and hide the detail/form elements.
                const clearForm = () => {
                setCurrentItem({});
                document.getElementById("detail").classList.add("hidden");
                }

                const handleChange = (event) => {
                    console.log("Handling change.");

                    // Fill in newItem with currentItem's data.
                    let newItem = { ...currentItem };

                    // Then change newItem's attributes based on the field the user is editing in the form. 
                    // (Ex. User edits input with name "title" and edits the object's "title" attributes.)
                    console.log("Event target name: " + event.target.name);
                    console.log("Event target value: " + event.target.value);
                    newItem[event.target.name] = event.target.value;

                    // Once the changes have occurred, set currentItem to newItem.
                    setCurrentItem(newItem);

                    // And change the attributes of the ACTUAL item with the same _id as currentItem to match what they are in currentItem now. 
                    items.find((item, index) => {
                    if (item._id == newItem._id) 
                    {
                        items[index] = newItem;
                        setItems(items);
                    }
                    })
                }

                return (
                <div> 
                    <ButterfliesPreview 
                    data={items} 
                    onClick={selectItem}
                    /> 

                    <ButterflyDetail
                    item={currentItem}
                    onChange={handleChange}
                    clearForm={clearForm}
                    />
                </div>  
                )
            }

            ReactDOM.render(<App/>, document.getElementById('display'));

        </script>

    </div> <!-- End "wrapper". -->
</body>

</html>